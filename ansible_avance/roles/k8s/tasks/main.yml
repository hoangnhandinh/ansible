# roles/k8s_cluster/tasks/main.yml

- name: Update /etc/hosts file
  lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
    state: present
  with_items:
    - "10.12.22.91  master"
    - "10.12.22.92  worker1"
    - "10.12.22.93  worker2"

- name: Disable swap
  command: swapoff -a

- name: Disable swap in fstab
  replace:
    path: /etc/fstab
    regexp: '^(.*\sswap\s.*)$'
    replace: '#\1'

- name: Load kernel modules
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf

- name: Load modules
  modprobe:
    name: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: Set kernel parameters
  copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/kubernetes.conf

- name: Apply sysctl parameters
  command: sysctl --system

- name: Install dependencies
  apt:
    name:
      - curl
      - gnupg2
      - software-properties-common
      - apt-transport-https
      - ca-certificates
    state: present
    update_cache: yes

- name: Add Docker GPG key
  shell: rm -f /etc/apt/trusted.gpg.d/docker.gpg && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg 

- name: Add Docker repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Install containerd
  apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Configure containerd
  shell: |
    containerd config default | tee /etc/containerd/config.toml >/dev/null 2>&1
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

- name: Restart and enable containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Add Kubernetes GPG key
  shell: rm -f /etc/apt/keyrings/kubernetes-apt-keyring.gpg && curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes repository
  shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  shell: apt-mark hold kubelet kubeadm kubectl

- name: Start kubelet service
  shell: systemctl start kubelet

- name: Pull Kubernetes images
  command: kubeadm config images pull
  when: inventory_hostname == 'master-node'

- name: Restart kubeadm
  command: kubeadm reset --force
  when: inventory_hostname == 'master-node'

- name: Add kubectl completion to bashrc
  lineinfile:
    path: ~/.bashrc
    line: "source <(kubectl completion bash)"
    create: yes
  when: inventory_hostname == 'master-node'

- name: Add kubectl alias to bashrc
  lineinfile:
    path: ~/.bashrc
    line: "alias k=kubectl"
    create: yes
  when: inventory_hostname == 'master-node'

- name: Add kubectl alias completion to bashrc
  lineinfile:
    path: ~/.bashrc
    line: "complete -o default -F __start_kubectl k"
    create: yes
  when: inventory_hostname == 'master-node'

### Finish install k8s on master node & workers node.

# - name: Initialize Kubernetes master node
#   command: kubeadm init --apiserver-advertise-address=10.12.22.91 --apiserver-cert-extra-sans=10.12.22.91 --pod-network-cidr=10.244.0.0/16 --kubernetes-version 1.28.10 
#   register: kubeadm_init_output
#   when: inventory_hostname == 'master-node'

# - name: Set kubeconfig for root
#   shell: |
#     mkdir -p $HOME/.kube
#     cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
#     chown $(id -u):$(id -g) $HOME/.kube/config
#   when: inventory_hostname == 'master-node'

# - name: Install Calico network plugin
#   command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
#   when: inventory_hostname == 'master-node'

# - name: Set join command as fact
#   set_fact:
#     kubeadm_join_command: "{{ kubeadm_init_output.stdout_lines | select('match', '^kubeadm join') | list | first }}"
#   when: inventory_hostname == 'master-node'

# - name: Join worker nodes to the cluster
#   command: "{{ hostvars['master-node']['kubeadm_join_command'] }}"
#   when: inventory_hostname in groups['workers']
